/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContentstackContentTypes = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly schema: Scalars['JSON'];
  readonly title: Scalars['String'];
  readonly uid: Scalars['String'];
  readonly updated_at: Maybe<Scalars['Date']>;
};


type ContentstackContentTypes_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentstackContentTypes_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentstackContentTypesConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentstackContentTypesEdge>;
  readonly group: ReadonlyArray<ContentstackContentTypesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentstackContentTypes>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentstackContentTypesConnection_distinctArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesConnection_groupArgs = {
  field: ContentstackContentTypesFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentstackContentTypesConnection_maxArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesConnection_minArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesConnection_sumArgs = {
  field: ContentstackContentTypesFieldsEnum;
};

type ContentstackContentTypesEdge = {
  readonly next: Maybe<ContentstackContentTypes>;
  readonly node: ContentstackContentTypes;
  readonly previous: Maybe<ContentstackContentTypes>;
};

type ContentstackContentTypesFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'description'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'schema'
  | 'title'
  | 'uid'
  | 'updated_at';

type ContentstackContentTypesFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly schema: InputMaybe<JSONQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
};

type ContentstackContentTypesGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentstackContentTypesEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentstackContentTypesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentstackContentTypes>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentstackContentTypesGroupConnection_distinctArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesGroupConnection_groupArgs = {
  field: ContentstackContentTypesFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentstackContentTypesGroupConnection_maxArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesGroupConnection_minArgs = {
  field: ContentstackContentTypesFieldsEnum;
};


type ContentstackContentTypesGroupConnection_sumArgs = {
  field: ContentstackContentTypesFieldsEnum;
};

type ContentstackContentTypesSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ContentstackContentTypesFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_assets = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly content_type: Maybe<Scalars['String']>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly dimension: Maybe<Contentstack_assetsDimension>;
  readonly file_size: Maybe<Scalars['String']>;
  readonly filename: Maybe<Scalars['String']>;
  readonly gatsbyImageData: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly is_dir: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly parent_uid: Maybe<Scalars['String']>;
  readonly publish_details: Maybe<Contentstack_assetsPublish_details>;
  readonly title: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type Contentstack_assets_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_assets_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  crop: InputMaybe<Scalars['String']>;
  fit: InputMaybe<Scalars['String']>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  pad: InputMaybe<Scalars['String']>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  trim: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type Contentstack_assets_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_assetsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_assetsEdge>;
  readonly group: ReadonlyArray<Contentstack_assetsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_assets>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_assetsConnection_distinctArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsConnection_groupArgs = {
  field: Contentstack_assetsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_assetsConnection_maxArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsConnection_minArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsConnection_sumArgs = {
  field: Contentstack_assetsFieldsEnum;
};

type Contentstack_assetsDimension = {
  readonly height: Maybe<Scalars['Float']>;
  readonly width: Maybe<Scalars['Int']>;
};

type Contentstack_assetsDimensionFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type Contentstack_assetsEdge = {
  readonly next: Maybe<Contentstack_assets>;
  readonly node: Contentstack_assets;
  readonly previous: Maybe<Contentstack_assets>;
};

type Contentstack_assetsFieldsEnum =
  | '_version'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content_type'
  | 'created_at'
  | 'created_by'
  | 'description'
  | 'dimension.height'
  | 'dimension.width'
  | 'file_size'
  | 'filename'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'is_dir'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'parent_uid'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'title'
  | 'uid'
  | 'updated_at'
  | 'updated_by'
  | 'url';

type Contentstack_assetsFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content_type: InputMaybe<StringQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly dimension: InputMaybe<Contentstack_assetsDimensionFilterInput>;
  readonly file_size: InputMaybe<StringQueryOperatorInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly is_dir: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly parent_uid: InputMaybe<StringQueryOperatorInput>;
  readonly publish_details: InputMaybe<Contentstack_assetsPublish_detailsFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_assetsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_assetsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_assetsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_assets>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_assetsGroupConnection_distinctArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsGroupConnection_groupArgs = {
  field: Contentstack_assetsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_assetsGroupConnection_maxArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsGroupConnection_minArgs = {
  field: Contentstack_assetsFieldsEnum;
};


type Contentstack_assetsGroupConnection_sumArgs = {
  field: Contentstack_assetsFieldsEnum;
};

type Contentstack_assetsPublish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_assetsPublish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_assetsPublish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_assetsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_assetsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_author = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly bio: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly picture: Contentstack_assets;
  readonly publish_details: Maybe<Contentstack_author_publish_details>;
  readonly title: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
};


type Contentstack_author_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_author_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_authorConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_authorEdge>;
  readonly group: ReadonlyArray<Contentstack_authorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_author>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_authorConnection_distinctArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorConnection_groupArgs = {
  field: Contentstack_authorFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_authorConnection_maxArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorConnection_minArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorConnection_sumArgs = {
  field: Contentstack_authorFieldsEnum;
};

type Contentstack_authorEdge = {
  readonly next: Maybe<Contentstack_author>;
  readonly node: Contentstack_author;
  readonly previous: Maybe<Contentstack_author>;
};

type Contentstack_authorFieldsEnum =
  | '_version'
  | 'bio'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'created_by'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'picture._version'
  | 'picture.children'
  | 'picture.children.children'
  | 'picture.children.children.children'
  | 'picture.children.children.id'
  | 'picture.children.id'
  | 'picture.children.internal.content'
  | 'picture.children.internal.contentDigest'
  | 'picture.children.internal.contentFilePath'
  | 'picture.children.internal.description'
  | 'picture.children.internal.fieldOwners'
  | 'picture.children.internal.ignoreType'
  | 'picture.children.internal.mediaType'
  | 'picture.children.internal.owner'
  | 'picture.children.internal.type'
  | 'picture.children.parent.children'
  | 'picture.children.parent.id'
  | 'picture.content_type'
  | 'picture.created_at'
  | 'picture.created_by'
  | 'picture.description'
  | 'picture.dimension.height'
  | 'picture.dimension.width'
  | 'picture.file_size'
  | 'picture.filename'
  | 'picture.gatsbyImageData'
  | 'picture.id'
  | 'picture.internal.content'
  | 'picture.internal.contentDigest'
  | 'picture.internal.contentFilePath'
  | 'picture.internal.description'
  | 'picture.internal.fieldOwners'
  | 'picture.internal.ignoreType'
  | 'picture.internal.mediaType'
  | 'picture.internal.owner'
  | 'picture.internal.type'
  | 'picture.is_dir'
  | 'picture.parent.children'
  | 'picture.parent.children.children'
  | 'picture.parent.children.id'
  | 'picture.parent.id'
  | 'picture.parent.internal.content'
  | 'picture.parent.internal.contentDigest'
  | 'picture.parent.internal.contentFilePath'
  | 'picture.parent.internal.description'
  | 'picture.parent.internal.fieldOwners'
  | 'picture.parent.internal.ignoreType'
  | 'picture.parent.internal.mediaType'
  | 'picture.parent.internal.owner'
  | 'picture.parent.internal.type'
  | 'picture.parent.parent.children'
  | 'picture.parent.parent.id'
  | 'picture.parent_uid'
  | 'picture.publish_details.environment'
  | 'picture.publish_details.locale'
  | 'picture.publish_details.time'
  | 'picture.publish_details.user'
  | 'picture.title'
  | 'picture.uid'
  | 'picture.updated_at'
  | 'picture.updated_by'
  | 'picture.url'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'title'
  | 'uid'
  | 'updated_at'
  | 'updated_by';

type Contentstack_authorFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly picture: InputMaybe<Contentstack_assetsFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_author_publish_detailsFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_authorFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_authorFilterInput>;
};

type Contentstack_authorGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_authorEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_authorGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_author>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_authorGroupConnection_distinctArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorGroupConnection_groupArgs = {
  field: Contentstack_authorFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_authorGroupConnection_maxArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorGroupConnection_minArgs = {
  field: Contentstack_authorFieldsEnum;
};


type Contentstack_authorGroupConnection_sumArgs = {
  field: Contentstack_authorFieldsEnum;
};

type Contentstack_authorSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_authorFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_author_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_author_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_author_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_blog_post = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly author: ReadonlyArray<Maybe<Contentstack_author>>;
  readonly body: Maybe<Scalars['JSON']>;
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly date: Maybe<Scalars['Date']>;
  readonly featured_image: Contentstack_assets;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly is_archived: Maybe<Scalars['Boolean']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publish_details: Maybe<Contentstack_blog_post_publish_details>;
  readonly related_post: Maybe<ReadonlyArray<Maybe<Contentstack_blog_post>>>;
  readonly seo: Maybe<Contentstack_blog_post_seo>;
  readonly title: Scalars['String'];
  readonly type: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type Contentstack_blog_post_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_blog_post_dateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_blog_post_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_blog_postConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_blog_postEdge>;
  readonly group: ReadonlyArray<Contentstack_blog_postGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_blog_post>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_blog_postConnection_distinctArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postConnection_groupArgs = {
  field: Contentstack_blog_postFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_blog_postConnection_maxArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postConnection_minArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postConnection_sumArgs = {
  field: Contentstack_blog_postFieldsEnum;
};

type Contentstack_blog_postEdge = {
  readonly next: Maybe<Contentstack_blog_post>;
  readonly node: Contentstack_blog_post;
  readonly previous: Maybe<Contentstack_blog_post>;
};

type Contentstack_blog_postFieldsEnum =
  | '_version'
  | 'author'
  | 'author._version'
  | 'author.bio'
  | 'author.children'
  | 'author.children.children'
  | 'author.children.children.children'
  | 'author.children.children.id'
  | 'author.children.id'
  | 'author.children.internal.content'
  | 'author.children.internal.contentDigest'
  | 'author.children.internal.contentFilePath'
  | 'author.children.internal.description'
  | 'author.children.internal.fieldOwners'
  | 'author.children.internal.ignoreType'
  | 'author.children.internal.mediaType'
  | 'author.children.internal.owner'
  | 'author.children.internal.type'
  | 'author.children.parent.children'
  | 'author.children.parent.id'
  | 'author.created_at'
  | 'author.created_by'
  | 'author.id'
  | 'author.internal.content'
  | 'author.internal.contentDigest'
  | 'author.internal.contentFilePath'
  | 'author.internal.description'
  | 'author.internal.fieldOwners'
  | 'author.internal.ignoreType'
  | 'author.internal.mediaType'
  | 'author.internal.owner'
  | 'author.internal.type'
  | 'author.locale'
  | 'author.parent.children'
  | 'author.parent.children.children'
  | 'author.parent.children.id'
  | 'author.parent.id'
  | 'author.parent.internal.content'
  | 'author.parent.internal.contentDigest'
  | 'author.parent.internal.contentFilePath'
  | 'author.parent.internal.description'
  | 'author.parent.internal.fieldOwners'
  | 'author.parent.internal.ignoreType'
  | 'author.parent.internal.mediaType'
  | 'author.parent.internal.owner'
  | 'author.parent.internal.type'
  | 'author.parent.parent.children'
  | 'author.parent.parent.id'
  | 'author.picture._version'
  | 'author.picture.children'
  | 'author.picture.children.children'
  | 'author.picture.children.id'
  | 'author.picture.content_type'
  | 'author.picture.created_at'
  | 'author.picture.created_by'
  | 'author.picture.description'
  | 'author.picture.dimension.height'
  | 'author.picture.dimension.width'
  | 'author.picture.file_size'
  | 'author.picture.filename'
  | 'author.picture.gatsbyImageData'
  | 'author.picture.id'
  | 'author.picture.internal.content'
  | 'author.picture.internal.contentDigest'
  | 'author.picture.internal.contentFilePath'
  | 'author.picture.internal.description'
  | 'author.picture.internal.fieldOwners'
  | 'author.picture.internal.ignoreType'
  | 'author.picture.internal.mediaType'
  | 'author.picture.internal.owner'
  | 'author.picture.internal.type'
  | 'author.picture.is_dir'
  | 'author.picture.parent.children'
  | 'author.picture.parent.id'
  | 'author.picture.parent_uid'
  | 'author.picture.publish_details.environment'
  | 'author.picture.publish_details.locale'
  | 'author.picture.publish_details.time'
  | 'author.picture.publish_details.user'
  | 'author.picture.title'
  | 'author.picture.uid'
  | 'author.picture.updated_at'
  | 'author.picture.updated_by'
  | 'author.picture.url'
  | 'author.publish_details.environment'
  | 'author.publish_details.locale'
  | 'author.publish_details.time'
  | 'author.publish_details.user'
  | 'author.title'
  | 'author.uid'
  | 'author.updated_at'
  | 'author.updated_by'
  | 'body'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'created_by'
  | 'date'
  | 'featured_image._version'
  | 'featured_image.children'
  | 'featured_image.children.children'
  | 'featured_image.children.children.children'
  | 'featured_image.children.children.id'
  | 'featured_image.children.id'
  | 'featured_image.children.internal.content'
  | 'featured_image.children.internal.contentDigest'
  | 'featured_image.children.internal.contentFilePath'
  | 'featured_image.children.internal.description'
  | 'featured_image.children.internal.fieldOwners'
  | 'featured_image.children.internal.ignoreType'
  | 'featured_image.children.internal.mediaType'
  | 'featured_image.children.internal.owner'
  | 'featured_image.children.internal.type'
  | 'featured_image.children.parent.children'
  | 'featured_image.children.parent.id'
  | 'featured_image.content_type'
  | 'featured_image.created_at'
  | 'featured_image.created_by'
  | 'featured_image.description'
  | 'featured_image.dimension.height'
  | 'featured_image.dimension.width'
  | 'featured_image.file_size'
  | 'featured_image.filename'
  | 'featured_image.gatsbyImageData'
  | 'featured_image.id'
  | 'featured_image.internal.content'
  | 'featured_image.internal.contentDigest'
  | 'featured_image.internal.contentFilePath'
  | 'featured_image.internal.description'
  | 'featured_image.internal.fieldOwners'
  | 'featured_image.internal.ignoreType'
  | 'featured_image.internal.mediaType'
  | 'featured_image.internal.owner'
  | 'featured_image.internal.type'
  | 'featured_image.is_dir'
  | 'featured_image.parent.children'
  | 'featured_image.parent.children.children'
  | 'featured_image.parent.children.id'
  | 'featured_image.parent.id'
  | 'featured_image.parent.internal.content'
  | 'featured_image.parent.internal.contentDigest'
  | 'featured_image.parent.internal.contentFilePath'
  | 'featured_image.parent.internal.description'
  | 'featured_image.parent.internal.fieldOwners'
  | 'featured_image.parent.internal.ignoreType'
  | 'featured_image.parent.internal.mediaType'
  | 'featured_image.parent.internal.owner'
  | 'featured_image.parent.internal.type'
  | 'featured_image.parent.parent.children'
  | 'featured_image.parent.parent.id'
  | 'featured_image.parent_uid'
  | 'featured_image.publish_details.environment'
  | 'featured_image.publish_details.locale'
  | 'featured_image.publish_details.time'
  | 'featured_image.publish_details.user'
  | 'featured_image.title'
  | 'featured_image.uid'
  | 'featured_image.updated_at'
  | 'featured_image.updated_by'
  | 'featured_image.url'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'is_archived'
  | 'locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'related_post'
  | 'related_post._version'
  | 'related_post.author'
  | 'related_post.author._version'
  | 'related_post.author.bio'
  | 'related_post.author.children'
  | 'related_post.author.children.children'
  | 'related_post.author.children.id'
  | 'related_post.author.created_at'
  | 'related_post.author.created_by'
  | 'related_post.author.id'
  | 'related_post.author.internal.content'
  | 'related_post.author.internal.contentDigest'
  | 'related_post.author.internal.contentFilePath'
  | 'related_post.author.internal.description'
  | 'related_post.author.internal.fieldOwners'
  | 'related_post.author.internal.ignoreType'
  | 'related_post.author.internal.mediaType'
  | 'related_post.author.internal.owner'
  | 'related_post.author.internal.type'
  | 'related_post.author.locale'
  | 'related_post.author.parent.children'
  | 'related_post.author.parent.id'
  | 'related_post.author.picture._version'
  | 'related_post.author.picture.children'
  | 'related_post.author.picture.content_type'
  | 'related_post.author.picture.created_at'
  | 'related_post.author.picture.created_by'
  | 'related_post.author.picture.description'
  | 'related_post.author.picture.file_size'
  | 'related_post.author.picture.filename'
  | 'related_post.author.picture.gatsbyImageData'
  | 'related_post.author.picture.id'
  | 'related_post.author.picture.is_dir'
  | 'related_post.author.picture.parent_uid'
  | 'related_post.author.picture.title'
  | 'related_post.author.picture.uid'
  | 'related_post.author.picture.updated_at'
  | 'related_post.author.picture.updated_by'
  | 'related_post.author.picture.url'
  | 'related_post.author.publish_details.environment'
  | 'related_post.author.publish_details.locale'
  | 'related_post.author.publish_details.time'
  | 'related_post.author.publish_details.user'
  | 'related_post.author.title'
  | 'related_post.author.uid'
  | 'related_post.author.updated_at'
  | 'related_post.author.updated_by'
  | 'related_post.body'
  | 'related_post.children'
  | 'related_post.children.children'
  | 'related_post.children.children.children'
  | 'related_post.children.children.id'
  | 'related_post.children.id'
  | 'related_post.children.internal.content'
  | 'related_post.children.internal.contentDigest'
  | 'related_post.children.internal.contentFilePath'
  | 'related_post.children.internal.description'
  | 'related_post.children.internal.fieldOwners'
  | 'related_post.children.internal.ignoreType'
  | 'related_post.children.internal.mediaType'
  | 'related_post.children.internal.owner'
  | 'related_post.children.internal.type'
  | 'related_post.children.parent.children'
  | 'related_post.children.parent.id'
  | 'related_post.created_at'
  | 'related_post.created_by'
  | 'related_post.date'
  | 'related_post.featured_image._version'
  | 'related_post.featured_image.children'
  | 'related_post.featured_image.children.children'
  | 'related_post.featured_image.children.id'
  | 'related_post.featured_image.content_type'
  | 'related_post.featured_image.created_at'
  | 'related_post.featured_image.created_by'
  | 'related_post.featured_image.description'
  | 'related_post.featured_image.dimension.height'
  | 'related_post.featured_image.dimension.width'
  | 'related_post.featured_image.file_size'
  | 'related_post.featured_image.filename'
  | 'related_post.featured_image.gatsbyImageData'
  | 'related_post.featured_image.id'
  | 'related_post.featured_image.internal.content'
  | 'related_post.featured_image.internal.contentDigest'
  | 'related_post.featured_image.internal.contentFilePath'
  | 'related_post.featured_image.internal.description'
  | 'related_post.featured_image.internal.fieldOwners'
  | 'related_post.featured_image.internal.ignoreType'
  | 'related_post.featured_image.internal.mediaType'
  | 'related_post.featured_image.internal.owner'
  | 'related_post.featured_image.internal.type'
  | 'related_post.featured_image.is_dir'
  | 'related_post.featured_image.parent.children'
  | 'related_post.featured_image.parent.id'
  | 'related_post.featured_image.parent_uid'
  | 'related_post.featured_image.publish_details.environment'
  | 'related_post.featured_image.publish_details.locale'
  | 'related_post.featured_image.publish_details.time'
  | 'related_post.featured_image.publish_details.user'
  | 'related_post.featured_image.title'
  | 'related_post.featured_image.uid'
  | 'related_post.featured_image.updated_at'
  | 'related_post.featured_image.updated_by'
  | 'related_post.featured_image.url'
  | 'related_post.id'
  | 'related_post.internal.content'
  | 'related_post.internal.contentDigest'
  | 'related_post.internal.contentFilePath'
  | 'related_post.internal.description'
  | 'related_post.internal.fieldOwners'
  | 'related_post.internal.ignoreType'
  | 'related_post.internal.mediaType'
  | 'related_post.internal.owner'
  | 'related_post.internal.type'
  | 'related_post.is_archived'
  | 'related_post.locale'
  | 'related_post.parent.children'
  | 'related_post.parent.children.children'
  | 'related_post.parent.children.id'
  | 'related_post.parent.id'
  | 'related_post.parent.internal.content'
  | 'related_post.parent.internal.contentDigest'
  | 'related_post.parent.internal.contentFilePath'
  | 'related_post.parent.internal.description'
  | 'related_post.parent.internal.fieldOwners'
  | 'related_post.parent.internal.ignoreType'
  | 'related_post.parent.internal.mediaType'
  | 'related_post.parent.internal.owner'
  | 'related_post.parent.internal.type'
  | 'related_post.parent.parent.children'
  | 'related_post.parent.parent.id'
  | 'related_post.publish_details.environment'
  | 'related_post.publish_details.locale'
  | 'related_post.publish_details.time'
  | 'related_post.publish_details.user'
  | 'related_post.related_post'
  | 'related_post.related_post._version'
  | 'related_post.related_post.author'
  | 'related_post.related_post.author._version'
  | 'related_post.related_post.author.bio'
  | 'related_post.related_post.author.children'
  | 'related_post.related_post.author.created_at'
  | 'related_post.related_post.author.created_by'
  | 'related_post.related_post.author.id'
  | 'related_post.related_post.author.locale'
  | 'related_post.related_post.author.title'
  | 'related_post.related_post.author.uid'
  | 'related_post.related_post.author.updated_at'
  | 'related_post.related_post.author.updated_by'
  | 'related_post.related_post.body'
  | 'related_post.related_post.children'
  | 'related_post.related_post.children.children'
  | 'related_post.related_post.children.id'
  | 'related_post.related_post.created_at'
  | 'related_post.related_post.created_by'
  | 'related_post.related_post.date'
  | 'related_post.related_post.featured_image._version'
  | 'related_post.related_post.featured_image.children'
  | 'related_post.related_post.featured_image.content_type'
  | 'related_post.related_post.featured_image.created_at'
  | 'related_post.related_post.featured_image.created_by'
  | 'related_post.related_post.featured_image.description'
  | 'related_post.related_post.featured_image.file_size'
  | 'related_post.related_post.featured_image.filename'
  | 'related_post.related_post.featured_image.gatsbyImageData'
  | 'related_post.related_post.featured_image.id'
  | 'related_post.related_post.featured_image.is_dir'
  | 'related_post.related_post.featured_image.parent_uid'
  | 'related_post.related_post.featured_image.title'
  | 'related_post.related_post.featured_image.uid'
  | 'related_post.related_post.featured_image.updated_at'
  | 'related_post.related_post.featured_image.updated_by'
  | 'related_post.related_post.featured_image.url'
  | 'related_post.related_post.id'
  | 'related_post.related_post.internal.content'
  | 'related_post.related_post.internal.contentDigest'
  | 'related_post.related_post.internal.contentFilePath'
  | 'related_post.related_post.internal.description'
  | 'related_post.related_post.internal.fieldOwners'
  | 'related_post.related_post.internal.ignoreType'
  | 'related_post.related_post.internal.mediaType'
  | 'related_post.related_post.internal.owner'
  | 'related_post.related_post.internal.type'
  | 'related_post.related_post.is_archived'
  | 'related_post.related_post.locale'
  | 'related_post.related_post.parent.children'
  | 'related_post.related_post.parent.id'
  | 'related_post.related_post.publish_details.environment'
  | 'related_post.related_post.publish_details.locale'
  | 'related_post.related_post.publish_details.time'
  | 'related_post.related_post.publish_details.user'
  | 'related_post.related_post.related_post'
  | 'related_post.related_post.related_post._version'
  | 'related_post.related_post.related_post.author'
  | 'related_post.related_post.related_post.body'
  | 'related_post.related_post.related_post.children'
  | 'related_post.related_post.related_post.created_at'
  | 'related_post.related_post.related_post.created_by'
  | 'related_post.related_post.related_post.date'
  | 'related_post.related_post.related_post.id'
  | 'related_post.related_post.related_post.is_archived'
  | 'related_post.related_post.related_post.locale'
  | 'related_post.related_post.related_post.related_post'
  | 'related_post.related_post.related_post.title'
  | 'related_post.related_post.related_post.type'
  | 'related_post.related_post.related_post.uid'
  | 'related_post.related_post.related_post.updated_at'
  | 'related_post.related_post.related_post.updated_by'
  | 'related_post.related_post.related_post.url'
  | 'related_post.related_post.seo.enable_search_indexing'
  | 'related_post.related_post.seo.keywords'
  | 'related_post.related_post.seo.meta_description'
  | 'related_post.related_post.seo.meta_title'
  | 'related_post.related_post.title'
  | 'related_post.related_post.type'
  | 'related_post.related_post.uid'
  | 'related_post.related_post.updated_at'
  | 'related_post.related_post.updated_by'
  | 'related_post.related_post.url'
  | 'related_post.seo.enable_search_indexing'
  | 'related_post.seo.keywords'
  | 'related_post.seo.meta_description'
  | 'related_post.seo.meta_title'
  | 'related_post.title'
  | 'related_post.type'
  | 'related_post.uid'
  | 'related_post.updated_at'
  | 'related_post.updated_by'
  | 'related_post.url'
  | 'seo.enable_search_indexing'
  | 'seo.keywords'
  | 'seo.meta_description'
  | 'seo.meta_title'
  | 'title'
  | 'type'
  | 'uid'
  | 'updated_at'
  | 'updated_by'
  | 'url';

type Contentstack_blog_postFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly author: InputMaybe<Contentstack_authorFilterListInput>;
  readonly body: InputMaybe<JSONQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly date: InputMaybe<DateQueryOperatorInput>;
  readonly featured_image: InputMaybe<Contentstack_assetsFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly is_archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_blog_post_publish_detailsFilterInput>;
  readonly related_post: InputMaybe<Contentstack_blog_postFilterListInput>;
  readonly seo: InputMaybe<Contentstack_blog_post_seoFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_blog_postFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_blog_postFilterInput>;
};

type Contentstack_blog_postGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_blog_postEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_blog_postGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_blog_post>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_blog_postGroupConnection_distinctArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postGroupConnection_groupArgs = {
  field: Contentstack_blog_postFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_blog_postGroupConnection_maxArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postGroupConnection_minArgs = {
  field: Contentstack_blog_postFieldsEnum;
};


type Contentstack_blog_postGroupConnection_sumArgs = {
  field: Contentstack_blog_postFieldsEnum;
};

type Contentstack_blog_postSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_blog_postFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_blog_post_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_blog_post_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_blog_post_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_blog_post_seo = {
  readonly enable_search_indexing: Maybe<Scalars['Boolean']>;
  readonly keywords: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
};

type Contentstack_blog_post_seoFilterInput = {
  readonly enable_search_indexing: InputMaybe<BooleanQueryOperatorInput>;
  readonly keywords: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_footer = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly copyright: Maybe<Scalars['JSON']>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly logo: Contentstack_assets;
  readonly navigation: Maybe<Contentstack_footer_navigation>;
  readonly parent: Maybe<Node>;
  readonly policies: Maybe<Contentstack_footer_policies>;
  readonly publish_details: Maybe<Contentstack_footer_publish_details>;
  readonly social: Maybe<Contentstack_footer_social>;
  readonly title: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
};


type Contentstack_footer_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_footer_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_footerConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_footerEdge>;
  readonly group: ReadonlyArray<Contentstack_footerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_footer>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_footerConnection_distinctArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerConnection_groupArgs = {
  field: Contentstack_footerFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_footerConnection_maxArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerConnection_minArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerConnection_sumArgs = {
  field: Contentstack_footerFieldsEnum;
};

type Contentstack_footerEdge = {
  readonly next: Maybe<Contentstack_footer>;
  readonly node: Contentstack_footer;
  readonly previous: Maybe<Contentstack_footer>;
};

type Contentstack_footerFieldsEnum =
  | '_version'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'copyright'
  | 'created_at'
  | 'created_by'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'logo._version'
  | 'logo.children'
  | 'logo.children.children'
  | 'logo.children.children.children'
  | 'logo.children.children.id'
  | 'logo.children.id'
  | 'logo.children.internal.content'
  | 'logo.children.internal.contentDigest'
  | 'logo.children.internal.contentFilePath'
  | 'logo.children.internal.description'
  | 'logo.children.internal.fieldOwners'
  | 'logo.children.internal.ignoreType'
  | 'logo.children.internal.mediaType'
  | 'logo.children.internal.owner'
  | 'logo.children.internal.type'
  | 'logo.children.parent.children'
  | 'logo.children.parent.id'
  | 'logo.content_type'
  | 'logo.created_at'
  | 'logo.created_by'
  | 'logo.description'
  | 'logo.dimension.height'
  | 'logo.dimension.width'
  | 'logo.file_size'
  | 'logo.filename'
  | 'logo.gatsbyImageData'
  | 'logo.id'
  | 'logo.internal.content'
  | 'logo.internal.contentDigest'
  | 'logo.internal.contentFilePath'
  | 'logo.internal.description'
  | 'logo.internal.fieldOwners'
  | 'logo.internal.ignoreType'
  | 'logo.internal.mediaType'
  | 'logo.internal.owner'
  | 'logo.internal.type'
  | 'logo.is_dir'
  | 'logo.parent.children'
  | 'logo.parent.children.children'
  | 'logo.parent.children.id'
  | 'logo.parent.id'
  | 'logo.parent.internal.content'
  | 'logo.parent.internal.contentDigest'
  | 'logo.parent.internal.contentFilePath'
  | 'logo.parent.internal.description'
  | 'logo.parent.internal.fieldOwners'
  | 'logo.parent.internal.ignoreType'
  | 'logo.parent.internal.mediaType'
  | 'logo.parent.internal.owner'
  | 'logo.parent.internal.type'
  | 'logo.parent.parent.children'
  | 'logo.parent.parent.id'
  | 'logo.parent_uid'
  | 'logo.publish_details.environment'
  | 'logo.publish_details.locale'
  | 'logo.publish_details.time'
  | 'logo.publish_details.user'
  | 'logo.title'
  | 'logo.uid'
  | 'logo.updated_at'
  | 'logo.updated_by'
  | 'logo.url'
  | 'navigation.link'
  | 'navigation.link.href'
  | 'navigation.link.title'
  | 'navigation.link.uuid'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'policies.link'
  | 'policies.link.href'
  | 'policies.link.title'
  | 'policies.link.uuid'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'social.social_share'
  | 'social.social_share.icon._version'
  | 'social.social_share.icon.children'
  | 'social.social_share.icon.content_type'
  | 'social.social_share.icon.created_at'
  | 'social.social_share.icon.created_by'
  | 'social.social_share.icon.description'
  | 'social.social_share.icon.file_size'
  | 'social.social_share.icon.filename'
  | 'social.social_share.icon.gatsbyImageData'
  | 'social.social_share.icon.id'
  | 'social.social_share.icon.is_dir'
  | 'social.social_share.icon.parent_uid'
  | 'social.social_share.icon.title'
  | 'social.social_share.icon.uid'
  | 'social.social_share.icon.updated_at'
  | 'social.social_share.icon.updated_by'
  | 'social.social_share.icon.url'
  | 'social.social_share.link.href'
  | 'social.social_share.link.title'
  | 'social.social_share.link.uuid'
  | 'title'
  | 'uid'
  | 'updated_at'
  | 'updated_by';

type Contentstack_footerFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly copyright: InputMaybe<JSONQueryOperatorInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<Contentstack_assetsFilterInput>;
  readonly navigation: InputMaybe<Contentstack_footer_navigationFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly policies: InputMaybe<Contentstack_footer_policiesFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_footer_publish_detailsFilterInput>;
  readonly social: InputMaybe<Contentstack_footer_socialFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_footerGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_footerEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_footerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_footer>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_footerGroupConnection_distinctArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerGroupConnection_groupArgs = {
  field: Contentstack_footerFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_footerGroupConnection_maxArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerGroupConnection_minArgs = {
  field: Contentstack_footerFieldsEnum;
};


type Contentstack_footerGroupConnection_sumArgs = {
  field: Contentstack_footerFieldsEnum;
};

type Contentstack_footerSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_footerFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_footer_navigation = {
  readonly link: Maybe<ReadonlyArray<Maybe<linktype>>>;
};

type Contentstack_footer_navigationFilterInput = {
  readonly link: InputMaybe<linktypeFilterListInput>;
};

type Contentstack_footer_policies = {
  readonly link: Maybe<ReadonlyArray<Maybe<linktype>>>;
};

type Contentstack_footer_policiesFilterInput = {
  readonly link: InputMaybe<linktypeFilterListInput>;
};

type Contentstack_footer_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_footer_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_footer_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_footer_social = {
  readonly social_share: Maybe<ReadonlyArray<Maybe<Contentstack_footer_social_social_share>>>;
};

type Contentstack_footer_socialFilterInput = {
  readonly social_share: InputMaybe<Contentstack_footer_social_social_shareFilterListInput>;
};

type Contentstack_footer_social_social_share = {
  readonly icon: Contentstack_assets;
  readonly link: Maybe<linktype>;
};

type Contentstack_footer_social_social_shareFilterInput = {
  readonly icon: InputMaybe<Contentstack_assetsFilterInput>;
  readonly link: InputMaybe<linktypeFilterInput>;
};

type Contentstack_footer_social_social_shareFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_footer_social_social_shareFilterInput>;
};

type Contentstack_form = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly fields: Maybe<ReadonlyArray<Maybe<Contentstack_form_fields>>>;
  readonly form: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publish_details: Maybe<Contentstack_form_publish_details>;
  readonly title: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
};


type Contentstack_form_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_form_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_formConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_formEdge>;
  readonly group: ReadonlyArray<Contentstack_formGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_form>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_formConnection_distinctArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formConnection_groupArgs = {
  field: Contentstack_formFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_formConnection_maxArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formConnection_minArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formConnection_sumArgs = {
  field: Contentstack_formFieldsEnum;
};

type Contentstack_formEdge = {
  readonly next: Maybe<Contentstack_form>;
  readonly node: Contentstack_form;
  readonly previous: Maybe<Contentstack_form>;
};

type Contentstack_formFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'fields'
  | 'fields.field_type'
  | 'fields.name'
  | 'form'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publish_details.locale'
  | 'title'
  | 'uid'
  | 'updated_at';

type Contentstack_formFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly fields: InputMaybe<Contentstack_form_fieldsFilterListInput>;
  readonly form: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_form_publish_detailsFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
};

type Contentstack_formGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_formEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_formGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_form>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_formGroupConnection_distinctArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formGroupConnection_groupArgs = {
  field: Contentstack_formFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_formGroupConnection_maxArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formGroupConnection_minArgs = {
  field: Contentstack_formFieldsEnum;
};


type Contentstack_formGroupConnection_sumArgs = {
  field: Contentstack_formFieldsEnum;
};

type Contentstack_formSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_formFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_form_fields = {
  readonly field_type: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type Contentstack_form_fieldsFilterInput = {
  readonly field_type: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_form_fieldsFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_form_fieldsFilterInput>;
};

type Contentstack_form_publish_details = {
  readonly locale: Maybe<Scalars['String']>;
};

type Contentstack_form_publish_detailsFilterInput = {
  readonly locale: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_header = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly enquiry_button_label: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly language_select: Maybe<Contentstack_header_language_select>;
  readonly locale: Maybe<Scalars['String']>;
  readonly logo: Contentstack_assets;
  readonly navigation_menu: Maybe<ReadonlyArray<Maybe<Contentstack_header_navigation_menu>>>;
  readonly parent: Maybe<Node>;
  readonly publish_details: Maybe<Contentstack_header_publish_details>;
  readonly secondary_menu: Maybe<ReadonlyArray<Maybe<Contentstack_header_secondary_menu>>>;
  readonly title: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
};


type Contentstack_header_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_header_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_headerConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_headerEdge>;
  readonly group: ReadonlyArray<Contentstack_headerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_header>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_headerConnection_distinctArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerConnection_groupArgs = {
  field: Contentstack_headerFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_headerConnection_maxArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerConnection_minArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerConnection_sumArgs = {
  field: Contentstack_headerFieldsEnum;
};

type Contentstack_headerEdge = {
  readonly next: Maybe<Contentstack_header>;
  readonly node: Contentstack_header;
  readonly previous: Maybe<Contentstack_header>;
};

type Contentstack_headerFieldsEnum =
  | '_version'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'created_by'
  | 'enquiry_button_label'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'language_select.choose_your_language'
  | 'language_select.languages'
  | 'language_select.languages.label'
  | 'language_select.languages.url'
  | 'locale'
  | 'logo._version'
  | 'logo.children'
  | 'logo.children.children'
  | 'logo.children.children.children'
  | 'logo.children.children.id'
  | 'logo.children.id'
  | 'logo.children.internal.content'
  | 'logo.children.internal.contentDigest'
  | 'logo.children.internal.contentFilePath'
  | 'logo.children.internal.description'
  | 'logo.children.internal.fieldOwners'
  | 'logo.children.internal.ignoreType'
  | 'logo.children.internal.mediaType'
  | 'logo.children.internal.owner'
  | 'logo.children.internal.type'
  | 'logo.children.parent.children'
  | 'logo.children.parent.id'
  | 'logo.content_type'
  | 'logo.created_at'
  | 'logo.created_by'
  | 'logo.description'
  | 'logo.dimension.height'
  | 'logo.dimension.width'
  | 'logo.file_size'
  | 'logo.filename'
  | 'logo.gatsbyImageData'
  | 'logo.id'
  | 'logo.internal.content'
  | 'logo.internal.contentDigest'
  | 'logo.internal.contentFilePath'
  | 'logo.internal.description'
  | 'logo.internal.fieldOwners'
  | 'logo.internal.ignoreType'
  | 'logo.internal.mediaType'
  | 'logo.internal.owner'
  | 'logo.internal.type'
  | 'logo.is_dir'
  | 'logo.parent.children'
  | 'logo.parent.children.children'
  | 'logo.parent.children.id'
  | 'logo.parent.id'
  | 'logo.parent.internal.content'
  | 'logo.parent.internal.contentDigest'
  | 'logo.parent.internal.contentFilePath'
  | 'logo.parent.internal.description'
  | 'logo.parent.internal.fieldOwners'
  | 'logo.parent.internal.ignoreType'
  | 'logo.parent.internal.mediaType'
  | 'logo.parent.internal.owner'
  | 'logo.parent.internal.type'
  | 'logo.parent.parent.children'
  | 'logo.parent.parent.id'
  | 'logo.parent_uid'
  | 'logo.publish_details.environment'
  | 'logo.publish_details.locale'
  | 'logo.publish_details.time'
  | 'logo.publish_details.user'
  | 'logo.title'
  | 'logo.uid'
  | 'logo.updated_at'
  | 'logo.updated_by'
  | 'logo.url'
  | 'navigation_menu'
  | 'navigation_menu.icon._version'
  | 'navigation_menu.icon.children'
  | 'navigation_menu.icon.children.children'
  | 'navigation_menu.icon.children.id'
  | 'navigation_menu.icon.content_type'
  | 'navigation_menu.icon.created_at'
  | 'navigation_menu.icon.created_by'
  | 'navigation_menu.icon.description'
  | 'navigation_menu.icon.dimension.height'
  | 'navigation_menu.icon.dimension.width'
  | 'navigation_menu.icon.file_size'
  | 'navigation_menu.icon.filename'
  | 'navigation_menu.icon.gatsbyImageData'
  | 'navigation_menu.icon.id'
  | 'navigation_menu.icon.internal.content'
  | 'navigation_menu.icon.internal.contentDigest'
  | 'navigation_menu.icon.internal.contentFilePath'
  | 'navigation_menu.icon.internal.description'
  | 'navigation_menu.icon.internal.fieldOwners'
  | 'navigation_menu.icon.internal.ignoreType'
  | 'navigation_menu.icon.internal.mediaType'
  | 'navigation_menu.icon.internal.owner'
  | 'navigation_menu.icon.internal.type'
  | 'navigation_menu.icon.is_dir'
  | 'navigation_menu.icon.parent.children'
  | 'navigation_menu.icon.parent.id'
  | 'navigation_menu.icon.parent_uid'
  | 'navigation_menu.icon.publish_details.environment'
  | 'navigation_menu.icon.publish_details.locale'
  | 'navigation_menu.icon.publish_details.time'
  | 'navigation_menu.icon.publish_details.user'
  | 'navigation_menu.icon.title'
  | 'navigation_menu.icon.uid'
  | 'navigation_menu.icon.updated_at'
  | 'navigation_menu.icon.updated_by'
  | 'navigation_menu.icon.url'
  | 'navigation_menu.label'
  | 'navigation_menu.page_reference'
  | 'navigation_menu.page_reference._version'
  | 'navigation_menu.page_reference.children'
  | 'navigation_menu.page_reference.children.children'
  | 'navigation_menu.page_reference.children.id'
  | 'navigation_menu.page_reference.created_at'
  | 'navigation_menu.page_reference.created_by'
  | 'navigation_menu.page_reference.id'
  | 'navigation_menu.page_reference.internal.content'
  | 'navigation_menu.page_reference.internal.contentDigest'
  | 'navigation_menu.page_reference.internal.contentFilePath'
  | 'navigation_menu.page_reference.internal.description'
  | 'navigation_menu.page_reference.internal.fieldOwners'
  | 'navigation_menu.page_reference.internal.ignoreType'
  | 'navigation_menu.page_reference.internal.mediaType'
  | 'navigation_menu.page_reference.internal.owner'
  | 'navigation_menu.page_reference.internal.type'
  | 'navigation_menu.page_reference.locale'
  | 'navigation_menu.page_reference.page_components'
  | 'navigation_menu.page_reference.parent.children'
  | 'navigation_menu.page_reference.parent.id'
  | 'navigation_menu.page_reference.publish_details.environment'
  | 'navigation_menu.page_reference.publish_details.locale'
  | 'navigation_menu.page_reference.publish_details.time'
  | 'navigation_menu.page_reference.publish_details.user'
  | 'navigation_menu.page_reference.seo.enable_search_indexing'
  | 'navigation_menu.page_reference.seo.keywords'
  | 'navigation_menu.page_reference.seo.meta_description'
  | 'navigation_menu.page_reference.seo.meta_title'
  | 'navigation_menu.page_reference.title'
  | 'navigation_menu.page_reference.uid'
  | 'navigation_menu.page_reference.updated_at'
  | 'navigation_menu.page_reference.updated_by'
  | 'navigation_menu.page_reference.url'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'secondary_menu'
  | 'secondary_menu.icon._version'
  | 'secondary_menu.icon.children'
  | 'secondary_menu.icon.children.children'
  | 'secondary_menu.icon.children.id'
  | 'secondary_menu.icon.content_type'
  | 'secondary_menu.icon.created_at'
  | 'secondary_menu.icon.created_by'
  | 'secondary_menu.icon.description'
  | 'secondary_menu.icon.dimension.height'
  | 'secondary_menu.icon.dimension.width'
  | 'secondary_menu.icon.file_size'
  | 'secondary_menu.icon.filename'
  | 'secondary_menu.icon.gatsbyImageData'
  | 'secondary_menu.icon.id'
  | 'secondary_menu.icon.internal.content'
  | 'secondary_menu.icon.internal.contentDigest'
  | 'secondary_menu.icon.internal.contentFilePath'
  | 'secondary_menu.icon.internal.description'
  | 'secondary_menu.icon.internal.fieldOwners'
  | 'secondary_menu.icon.internal.ignoreType'
  | 'secondary_menu.icon.internal.mediaType'
  | 'secondary_menu.icon.internal.owner'
  | 'secondary_menu.icon.internal.type'
  | 'secondary_menu.icon.is_dir'
  | 'secondary_menu.icon.parent.children'
  | 'secondary_menu.icon.parent.id'
  | 'secondary_menu.icon.parent_uid'
  | 'secondary_menu.icon.publish_details.environment'
  | 'secondary_menu.icon.publish_details.locale'
  | 'secondary_menu.icon.publish_details.time'
  | 'secondary_menu.icon.publish_details.user'
  | 'secondary_menu.icon.title'
  | 'secondary_menu.icon.uid'
  | 'secondary_menu.icon.updated_at'
  | 'secondary_menu.icon.updated_by'
  | 'secondary_menu.icon.url'
  | 'secondary_menu.label'
  | 'secondary_menu.url'
  | 'title'
  | 'uid'
  | 'updated_at'
  | 'updated_by';

type Contentstack_headerFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly enquiry_button_label: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly language_select: InputMaybe<Contentstack_header_language_selectFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly logo: InputMaybe<Contentstack_assetsFilterInput>;
  readonly navigation_menu: InputMaybe<Contentstack_header_navigation_menuFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_header_publish_detailsFilterInput>;
  readonly secondary_menu: InputMaybe<Contentstack_header_secondary_menuFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_headerGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_headerEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_headerGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_header>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_headerGroupConnection_distinctArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerGroupConnection_groupArgs = {
  field: Contentstack_headerFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_headerGroupConnection_maxArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerGroupConnection_minArgs = {
  field: Contentstack_headerFieldsEnum;
};


type Contentstack_headerGroupConnection_sumArgs = {
  field: Contentstack_headerFieldsEnum;
};

type Contentstack_headerSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_headerFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_header_language_select = {
  readonly choose_your_language: Maybe<Scalars['String']>;
  readonly languages: Maybe<ReadonlyArray<Maybe<Contentstack_header_language_select_languages>>>;
};

type Contentstack_header_language_selectFilterInput = {
  readonly choose_your_language: InputMaybe<StringQueryOperatorInput>;
  readonly languages: InputMaybe<Contentstack_header_language_select_languagesFilterListInput>;
};

type Contentstack_header_language_select_languages = {
  readonly label: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type Contentstack_header_language_select_languagesFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_header_language_select_languagesFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_header_language_select_languagesFilterInput>;
};

type Contentstack_header_navigation_menu = {
  readonly icon: Maybe<Contentstack_assets>;
  readonly label: Maybe<Scalars['String']>;
  readonly page_reference: ReadonlyArray<Maybe<Contentstack_page>>;
};

type Contentstack_header_navigation_menuFilterInput = {
  readonly icon: InputMaybe<Contentstack_assetsFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly page_reference: InputMaybe<Contentstack_pageFilterListInput>;
};

type Contentstack_header_navigation_menuFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_header_navigation_menuFilterInput>;
};

type Contentstack_header_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_header_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_header_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_header_secondary_menu = {
  readonly icon: Maybe<Contentstack_assets>;
  readonly label: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type Contentstack_header_secondary_menuFilterInput = {
  readonly icon: InputMaybe<Contentstack_assetsFilterInput>;
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_header_secondary_menuFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_header_secondary_menuFilterInput>;
};

type Contentstack_news_and_insights = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly body: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly featured_image: Contentstack_assets;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly publish_details: Maybe<Contentstack_news_and_insights_publish_details>;
  readonly title: Scalars['String'];
  readonly type: Maybe<Scalars['String']>;
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
};


type Contentstack_news_and_insights_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_news_and_insights_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_news_and_insightsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_news_and_insightsEdge>;
  readonly group: ReadonlyArray<Contentstack_news_and_insightsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_news_and_insights>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_news_and_insightsConnection_distinctArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsConnection_groupArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_news_and_insightsConnection_maxArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsConnection_minArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsConnection_sumArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};

type Contentstack_news_and_insightsEdge = {
  readonly next: Maybe<Contentstack_news_and_insights>;
  readonly node: Contentstack_news_and_insights;
  readonly previous: Maybe<Contentstack_news_and_insights>;
};

type Contentstack_news_and_insightsFieldsEnum =
  | '_version'
  | 'body'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'created_by'
  | 'featured_image._version'
  | 'featured_image.children'
  | 'featured_image.children.children'
  | 'featured_image.children.children.children'
  | 'featured_image.children.children.id'
  | 'featured_image.children.id'
  | 'featured_image.children.internal.content'
  | 'featured_image.children.internal.contentDigest'
  | 'featured_image.children.internal.contentFilePath'
  | 'featured_image.children.internal.description'
  | 'featured_image.children.internal.fieldOwners'
  | 'featured_image.children.internal.ignoreType'
  | 'featured_image.children.internal.mediaType'
  | 'featured_image.children.internal.owner'
  | 'featured_image.children.internal.type'
  | 'featured_image.children.parent.children'
  | 'featured_image.children.parent.id'
  | 'featured_image.content_type'
  | 'featured_image.created_at'
  | 'featured_image.created_by'
  | 'featured_image.description'
  | 'featured_image.dimension.height'
  | 'featured_image.dimension.width'
  | 'featured_image.file_size'
  | 'featured_image.filename'
  | 'featured_image.gatsbyImageData'
  | 'featured_image.id'
  | 'featured_image.internal.content'
  | 'featured_image.internal.contentDigest'
  | 'featured_image.internal.contentFilePath'
  | 'featured_image.internal.description'
  | 'featured_image.internal.fieldOwners'
  | 'featured_image.internal.ignoreType'
  | 'featured_image.internal.mediaType'
  | 'featured_image.internal.owner'
  | 'featured_image.internal.type'
  | 'featured_image.is_dir'
  | 'featured_image.parent.children'
  | 'featured_image.parent.children.children'
  | 'featured_image.parent.children.id'
  | 'featured_image.parent.id'
  | 'featured_image.parent.internal.content'
  | 'featured_image.parent.internal.contentDigest'
  | 'featured_image.parent.internal.contentFilePath'
  | 'featured_image.parent.internal.description'
  | 'featured_image.parent.internal.fieldOwners'
  | 'featured_image.parent.internal.ignoreType'
  | 'featured_image.parent.internal.mediaType'
  | 'featured_image.parent.internal.owner'
  | 'featured_image.parent.internal.type'
  | 'featured_image.parent.parent.children'
  | 'featured_image.parent.parent.id'
  | 'featured_image.parent_uid'
  | 'featured_image.publish_details.environment'
  | 'featured_image.publish_details.locale'
  | 'featured_image.publish_details.time'
  | 'featured_image.publish_details.user'
  | 'featured_image.title'
  | 'featured_image.uid'
  | 'featured_image.updated_at'
  | 'featured_image.updated_by'
  | 'featured_image.url'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'title'
  | 'type'
  | 'uid'
  | 'updated_at'
  | 'updated_by';

type Contentstack_news_and_insightsFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly featured_image: InputMaybe<Contentstack_assetsFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_news_and_insights_publish_detailsFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_news_and_insightsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_news_and_insightsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_news_and_insightsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_news_and_insights>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_news_and_insightsGroupConnection_distinctArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsGroupConnection_groupArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_news_and_insightsGroupConnection_maxArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsGroupConnection_minArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};


type Contentstack_news_and_insightsGroupConnection_sumArgs = {
  field: Contentstack_news_and_insightsFieldsEnum;
};

type Contentstack_news_and_insightsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_news_and_insightsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_news_and_insights_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_news_and_insights_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_news_and_insights_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page = Node & {
  readonly _version: Maybe<Scalars['Int']>;
  readonly children: ReadonlyArray<Node>;
  readonly created_at: Maybe<Scalars['Date']>;
  readonly created_by: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly locale: Maybe<Scalars['String']>;
  readonly page_components: Maybe<ReadonlyArray<Maybe<Contentstack_page_page_components>>>;
  readonly parent: Maybe<Node>;
  readonly publish_details: Maybe<Contentstack_page_publish_details>;
  readonly seo: Maybe<Contentstack_page_seo>;
  readonly title: Scalars['String'];
  readonly uid: Maybe<Scalars['String']>;
  readonly updated_at: Maybe<Scalars['Date']>;
  readonly updated_by: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type Contentstack_page_created_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Contentstack_page_updated_atArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_pageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_pageEdge>;
  readonly group: ReadonlyArray<Contentstack_pageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_pageConnection_distinctArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageConnection_groupArgs = {
  field: Contentstack_pageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_pageConnection_maxArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageConnection_minArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageConnection_sumArgs = {
  field: Contentstack_pageFieldsEnum;
};

type Contentstack_pageEdge = {
  readonly next: Maybe<Contentstack_page>;
  readonly node: Contentstack_page;
  readonly previous: Maybe<Contentstack_page>;
};

type Contentstack_pageFieldsEnum =
  | '_version'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'created_at'
  | 'created_by'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'locale'
  | 'page_components'
  | 'page_components.cards_slider.cards'
  | 'page_components.cards_slider.cards._version'
  | 'page_components.cards_slider.cards.author'
  | 'page_components.cards_slider.cards.body'
  | 'page_components.cards_slider.cards.children'
  | 'page_components.cards_slider.cards.created_at'
  | 'page_components.cards_slider.cards.created_by'
  | 'page_components.cards_slider.cards.date'
  | 'page_components.cards_slider.cards.id'
  | 'page_components.cards_slider.cards.is_archived'
  | 'page_components.cards_slider.cards.locale'
  | 'page_components.cards_slider.cards.related_post'
  | 'page_components.cards_slider.cards.title'
  | 'page_components.cards_slider.cards.type'
  | 'page_components.cards_slider.cards.uid'
  | 'page_components.cards_slider.cards.updated_at'
  | 'page_components.cards_slider.cards.updated_by'
  | 'page_components.cards_slider.cards.url'
  | 'page_components.cards_slider.jump_to_link.href'
  | 'page_components.cards_slider.jump_to_link.title'
  | 'page_components.cards_slider.jump_to_link.uuid'
  | 'page_components.cards_slider.title'
  | 'page_components.contact_details.address'
  | 'page_components.contact_details.email'
  | 'page_components.contact_details.phone'
  | 'page_components.enquiry_block.background.gradient_end'
  | 'page_components.enquiry_block.background.gradient_start'
  | 'page_components.enquiry_block.body'
  | 'page_components.enquiry_block.cta.label'
  | 'page_components.enquiry_block.cta.url'
  | 'page_components.enquiry_block.title'
  | 'page_components.from_blog.featured_blogs'
  | 'page_components.from_blog.featured_blogs._version'
  | 'page_components.from_blog.featured_blogs.author'
  | 'page_components.from_blog.featured_blogs.body'
  | 'page_components.from_blog.featured_blogs.children'
  | 'page_components.from_blog.featured_blogs.created_at'
  | 'page_components.from_blog.featured_blogs.created_by'
  | 'page_components.from_blog.featured_blogs.date'
  | 'page_components.from_blog.featured_blogs.id'
  | 'page_components.from_blog.featured_blogs.is_archived'
  | 'page_components.from_blog.featured_blogs.locale'
  | 'page_components.from_blog.featured_blogs.related_post'
  | 'page_components.from_blog.featured_blogs.title'
  | 'page_components.from_blog.featured_blogs.type'
  | 'page_components.from_blog.featured_blogs.uid'
  | 'page_components.from_blog.featured_blogs.updated_at'
  | 'page_components.from_blog.featured_blogs.updated_by'
  | 'page_components.from_blog.featured_blogs.url'
  | 'page_components.from_blog.title_h2'
  | 'page_components.from_blog.view_articles.href'
  | 'page_components.from_blog.view_articles.title'
  | 'page_components.from_blog.view_articles.uuid'
  | 'page_components.hero_banner.banner_description'
  | 'page_components.hero_banner.banner_image._version'
  | 'page_components.hero_banner.banner_image.children'
  | 'page_components.hero_banner.banner_image.content_type'
  | 'page_components.hero_banner.banner_image.created_at'
  | 'page_components.hero_banner.banner_image.created_by'
  | 'page_components.hero_banner.banner_image.description'
  | 'page_components.hero_banner.banner_image.file_size'
  | 'page_components.hero_banner.banner_image.filename'
  | 'page_components.hero_banner.banner_image.gatsbyImageData'
  | 'page_components.hero_banner.banner_image.id'
  | 'page_components.hero_banner.banner_image.is_dir'
  | 'page_components.hero_banner.banner_image.parent_uid'
  | 'page_components.hero_banner.banner_image.title'
  | 'page_components.hero_banner.banner_image.uid'
  | 'page_components.hero_banner.banner_image.updated_at'
  | 'page_components.hero_banner.banner_image.updated_by'
  | 'page_components.hero_banner.banner_image.url'
  | 'page_components.hero_banner.banner_title'
  | 'page_components.hero_banner.bg_color'
  | 'page_components.hero_banner.call_to_action.href'
  | 'page_components.hero_banner.call_to_action.title'
  | 'page_components.hero_banner.call_to_action.uuid'
  | 'page_components.hero_banner.text_color'
  | 'page_components.our_team.description'
  | 'page_components.our_team.employees'
  | 'page_components.our_team.employees.designation'
  | 'page_components.our_team.employees.name'
  | 'page_components.our_team.title_h2'
  | 'page_components.products.products'
  | 'page_components.section.background.gradient_end'
  | 'page_components.section.background.gradient_start'
  | 'page_components.section.call_to_action.href'
  | 'page_components.section.call_to_action.title'
  | 'page_components.section.call_to_action.uuid'
  | 'page_components.section.description'
  | 'page_components.section.image._version'
  | 'page_components.section.image.children'
  | 'page_components.section.image.content_type'
  | 'page_components.section.image.created_at'
  | 'page_components.section.image.created_by'
  | 'page_components.section.image.description'
  | 'page_components.section.image.file_size'
  | 'page_components.section.image.filename'
  | 'page_components.section.image.gatsbyImageData'
  | 'page_components.section.image.id'
  | 'page_components.section.image.is_dir'
  | 'page_components.section.image.parent_uid'
  | 'page_components.section.image.title'
  | 'page_components.section.image.uid'
  | 'page_components.section.image.updated_at'
  | 'page_components.section.image.updated_by'
  | 'page_components.section.image.url'
  | 'page_components.section.image_alignment'
  | 'page_components.section.title_h2'
  | 'page_components.section_with_buckets.bucket_tabular'
  | 'page_components.section_with_buckets.buckets'
  | 'page_components.section_with_buckets.buckets.description'
  | 'page_components.section_with_buckets.buckets.title_h3'
  | 'page_components.section_with_buckets.description'
  | 'page_components.section_with_buckets.title_h2'
  | 'page_components.section_with_cards.cards'
  | 'page_components.section_with_cards.cards.description'
  | 'page_components.section_with_cards.cards.title_h3'
  | 'page_components.section_with_html_code.description'
  | 'page_components.section_with_html_code.html_code'
  | 'page_components.section_with_html_code.html_code_alignment'
  | 'page_components.section_with_html_code.title'
  | 'page_components.widget.title_h2'
  | 'page_components.widget.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'publish_details.environment'
  | 'publish_details.locale'
  | 'publish_details.time'
  | 'publish_details.user'
  | 'seo.enable_search_indexing'
  | 'seo.keywords'
  | 'seo.meta_description'
  | 'seo.meta_title'
  | 'title'
  | 'uid'
  | 'updated_at'
  | 'updated_by'
  | 'url';

type Contentstack_pageFilterInput = {
  readonly _version: InputMaybe<IntQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly created_at: InputMaybe<DateQueryOperatorInput>;
  readonly created_by: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly page_components: InputMaybe<Contentstack_page_page_componentsFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publish_details: InputMaybe<Contentstack_page_publish_detailsFilterInput>;
  readonly seo: InputMaybe<Contentstack_page_seoFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<StringQueryOperatorInput>;
  readonly updated_at: InputMaybe<DateQueryOperatorInput>;
  readonly updated_by: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_pageFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_pageFilterInput>;
};

type Contentstack_pageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<Contentstack_pageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<Contentstack_pageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Contentstack_page>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type Contentstack_pageGroupConnection_distinctArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageGroupConnection_groupArgs = {
  field: Contentstack_pageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type Contentstack_pageGroupConnection_maxArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageGroupConnection_minArgs = {
  field: Contentstack_pageFieldsEnum;
};


type Contentstack_pageGroupConnection_sumArgs = {
  field: Contentstack_pageFieldsEnum;
};

type Contentstack_pageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Contentstack_pageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Contentstack_page_page_components = {
  readonly cards_slider: Maybe<Contentstack_page_page_componentscards_slider>;
  readonly contact_details: Maybe<Contentstack_page_page_componentscontact_details>;
  readonly enquiry_block: Maybe<Contentstack_page_page_componentsenquiry_block>;
  readonly from_blog: Maybe<Contentstack_page_page_componentsfrom_blog>;
  readonly hero_banner: Maybe<Contentstack_page_page_componentshero_banner>;
  readonly our_team: Maybe<Contentstack_page_page_componentsour_team>;
  readonly products: Maybe<Contentstack_page_page_componentsproducts>;
  readonly section: Maybe<Contentstack_page_page_componentssection>;
  readonly section_with_buckets: Maybe<Contentstack_page_page_componentssection_with_buckets>;
  readonly section_with_cards: Maybe<Contentstack_page_page_componentssection_with_cards>;
  readonly section_with_html_code: Maybe<Contentstack_page_page_componentssection_with_html_code>;
  readonly widget: Maybe<Contentstack_page_page_componentswidget>;
};

type Contentstack_page_page_componentsFilterInput = {
  readonly cards_slider: InputMaybe<Contentstack_page_page_componentscards_sliderFilterInput>;
  readonly contact_details: InputMaybe<Contentstack_page_page_componentscontact_detailsFilterInput>;
  readonly enquiry_block: InputMaybe<Contentstack_page_page_componentsenquiry_blockFilterInput>;
  readonly from_blog: InputMaybe<Contentstack_page_page_componentsfrom_blogFilterInput>;
  readonly hero_banner: InputMaybe<Contentstack_page_page_componentshero_bannerFilterInput>;
  readonly our_team: InputMaybe<Contentstack_page_page_componentsour_teamFilterInput>;
  readonly products: InputMaybe<Contentstack_page_page_componentsproductsFilterInput>;
  readonly section: InputMaybe<Contentstack_page_page_componentssectionFilterInput>;
  readonly section_with_buckets: InputMaybe<Contentstack_page_page_componentssection_with_bucketsFilterInput>;
  readonly section_with_cards: InputMaybe<Contentstack_page_page_componentssection_with_cardsFilterInput>;
  readonly section_with_html_code: InputMaybe<Contentstack_page_page_componentssection_with_html_codeFilterInput>;
  readonly widget: InputMaybe<Contentstack_page_page_componentswidgetFilterInput>;
};

type Contentstack_page_page_componentsFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_page_page_componentsFilterInput>;
};

type Contentstack_page_page_componentscards_slider = {
  readonly cards: ReadonlyArray<Maybe<Contentstack_blog_post>>;
  readonly jump_to_link: Maybe<linktype>;
  readonly title: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentscards_sliderFilterInput = {
  readonly cards: InputMaybe<Contentstack_blog_postFilterListInput>;
  readonly jump_to_link: InputMaybe<linktypeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentscontact_details = {
  readonly address: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly phone: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentscontact_detailsFilterInput = {
  readonly address: InputMaybe<StringQueryOperatorInput>;
  readonly email: InputMaybe<StringQueryOperatorInput>;
  readonly phone: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsenquiry_block = {
  readonly background: Maybe<Contentstack_page_page_componentsenquiry_block_background>;
  readonly body: Maybe<Scalars['String']>;
  readonly cta: Maybe<Contentstack_page_page_componentsenquiry_block_cta>;
  readonly title: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentsenquiry_blockFilterInput = {
  readonly background: InputMaybe<Contentstack_page_page_componentsenquiry_block_backgroundFilterInput>;
  readonly body: InputMaybe<StringQueryOperatorInput>;
  readonly cta: InputMaybe<Contentstack_page_page_componentsenquiry_block_ctaFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsenquiry_block_background = {
  readonly gradient_end: Maybe<Scalars['String']>;
  readonly gradient_start: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentsenquiry_block_backgroundFilterInput = {
  readonly gradient_end: InputMaybe<StringQueryOperatorInput>;
  readonly gradient_start: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsenquiry_block_cta = {
  readonly label: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentsenquiry_block_ctaFilterInput = {
  readonly label: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsfrom_blog = {
  readonly featured_blogs: Maybe<ReadonlyArray<Maybe<Contentstack_blog_post>>>;
  readonly title_h2: Maybe<Scalars['String']>;
  readonly view_articles: Maybe<linktype>;
};

type Contentstack_page_page_componentsfrom_blogFilterInput = {
  readonly featured_blogs: InputMaybe<Contentstack_blog_postFilterListInput>;
  readonly title_h2: InputMaybe<StringQueryOperatorInput>;
  readonly view_articles: InputMaybe<linktypeFilterInput>;
};

type Contentstack_page_page_componentshero_banner = {
  readonly banner_description: Maybe<Scalars['String']>;
  readonly banner_image: Maybe<Contentstack_assets>;
  readonly banner_title: Maybe<Scalars['String']>;
  readonly bg_color: Maybe<Scalars['String']>;
  readonly call_to_action: Maybe<linktype>;
  readonly text_color: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentshero_bannerFilterInput = {
  readonly banner_description: InputMaybe<StringQueryOperatorInput>;
  readonly banner_image: InputMaybe<Contentstack_assetsFilterInput>;
  readonly banner_title: InputMaybe<StringQueryOperatorInput>;
  readonly bg_color: InputMaybe<StringQueryOperatorInput>;
  readonly call_to_action: InputMaybe<linktypeFilterInput>;
  readonly text_color: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsour_team = {
  readonly description: Maybe<Scalars['String']>;
  readonly employees: Maybe<ReadonlyArray<Maybe<Contentstack_page_page_componentsour_team_employees>>>;
  readonly title_h2: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentsour_teamFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly employees: InputMaybe<Contentstack_page_page_componentsour_team_employeesFilterListInput>;
  readonly title_h2: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsour_team_employees = {
  readonly designation: Maybe<Scalars['String']>;
  readonly image: Contentstack_assets;
  readonly name: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentsour_team_employeesFilterInput = {
  readonly designation: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<Contentstack_assetsFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentsour_team_employeesFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_page_page_componentsour_team_employeesFilterInput>;
};

type Contentstack_page_page_componentsproducts = {
  readonly products: Maybe<Scalars['JSON']>;
};

type Contentstack_page_page_componentsproductsFilterInput = {
  readonly products: InputMaybe<JSONQueryOperatorInput>;
};

type Contentstack_page_page_componentssection = {
  readonly background: Maybe<Contentstack_page_page_componentssection_background>;
  readonly call_to_action: Maybe<linktype>;
  readonly description: Maybe<Scalars['String']>;
  readonly image: Contentstack_assets;
  readonly image_alignment: Maybe<Scalars['String']>;
  readonly title_h2: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssectionFilterInput = {
  readonly background: InputMaybe<Contentstack_page_page_componentssection_backgroundFilterInput>;
  readonly call_to_action: InputMaybe<linktypeFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<Contentstack_assetsFilterInput>;
  readonly image_alignment: InputMaybe<StringQueryOperatorInput>;
  readonly title_h2: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentssection_background = {
  readonly gradient_end: Maybe<Scalars['String']>;
  readonly gradient_start: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssection_backgroundFilterInput = {
  readonly gradient_end: InputMaybe<StringQueryOperatorInput>;
  readonly gradient_start: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentssection_with_buckets = {
  readonly bucket_tabular: Maybe<Scalars['Boolean']>;
  readonly buckets: Maybe<ReadonlyArray<Maybe<Contentstack_page_page_componentssection_with_buckets_buckets>>>;
  readonly description: Maybe<Scalars['String']>;
  readonly title_h2: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssection_with_bucketsFilterInput = {
  readonly bucket_tabular: InputMaybe<BooleanQueryOperatorInput>;
  readonly buckets: InputMaybe<Contentstack_page_page_componentssection_with_buckets_bucketsFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title_h2: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentssection_with_buckets_buckets = {
  readonly call_to_action: Maybe<linktype>;
  readonly description: Maybe<Scalars['JSON']>;
  readonly icon: Contentstack_assets;
  readonly title_h3: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssection_with_buckets_bucketsFilterInput = {
  readonly call_to_action: InputMaybe<linktypeFilterInput>;
  readonly description: InputMaybe<JSONQueryOperatorInput>;
  readonly icon: InputMaybe<Contentstack_assetsFilterInput>;
  readonly title_h3: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentssection_with_buckets_bucketsFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_page_page_componentssection_with_buckets_bucketsFilterInput>;
};

type Contentstack_page_page_componentssection_with_cards = {
  readonly cards: Maybe<ReadonlyArray<Maybe<Contentstack_page_page_componentssection_with_cards_cards>>>;
};

type Contentstack_page_page_componentssection_with_cardsFilterInput = {
  readonly cards: InputMaybe<Contentstack_page_page_componentssection_with_cards_cardsFilterListInput>;
};

type Contentstack_page_page_componentssection_with_cards_cards = {
  readonly call_to_action: Maybe<linktype>;
  readonly description: Maybe<Scalars['String']>;
  readonly title_h3: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssection_with_cards_cardsFilterInput = {
  readonly call_to_action: InputMaybe<linktypeFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly title_h3: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentssection_with_cards_cardsFilterListInput = {
  readonly elemMatch: InputMaybe<Contentstack_page_page_componentssection_with_cards_cardsFilterInput>;
};

type Contentstack_page_page_componentssection_with_html_code = {
  readonly description: Maybe<Scalars['JSON']>;
  readonly html_code: Maybe<Scalars['String']>;
  readonly html_code_alignment: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentssection_with_html_codeFilterInput = {
  readonly description: InputMaybe<JSONQueryOperatorInput>;
  readonly html_code: InputMaybe<StringQueryOperatorInput>;
  readonly html_code_alignment: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_page_componentswidget = {
  readonly title_h2: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type Contentstack_page_page_componentswidgetFilterInput = {
  readonly title_h2: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_publish_details = {
  readonly environment: Maybe<Scalars['String']>;
  readonly locale: Maybe<Scalars['String']>;
  readonly time: Maybe<Scalars['Date']>;
  readonly user: Maybe<Scalars['String']>;
};


type Contentstack_page_publish_details_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type Contentstack_page_publish_detailsFilterInput = {
  readonly environment: InputMaybe<StringQueryOperatorInput>;
  readonly locale: InputMaybe<StringQueryOperatorInput>;
  readonly time: InputMaybe<DateQueryOperatorInput>;
  readonly user: InputMaybe<StringQueryOperatorInput>;
};

type Contentstack_page_seo = {
  readonly enable_search_indexing: Maybe<Scalars['Boolean']>;
  readonly keywords: Maybe<Scalars['String']>;
  readonly meta_description: Maybe<Scalars['String']>;
  readonly meta_title: Maybe<Scalars['String']>;
};

type Contentstack_page_seoFilterInput = {
  readonly enable_search_indexing: InputMaybe<BooleanQueryOperatorInput>;
  readonly keywords: InputMaybe<StringQueryOperatorInput>;
  readonly meta_description: InputMaybe<StringQueryOperatorInput>;
  readonly meta_title: InputMaybe<StringQueryOperatorInput>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.contentFilePath'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.contentFilePath'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.contentFilePath'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.contentFilePath'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.contentFilePath'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.contentFilePath'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 'CENTER'
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | 'AUTO'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allContentstackAssets: Contentstack_assetsConnection;
  readonly allContentstackAuthor: Contentstack_authorConnection;
  readonly allContentstackBlogPost: Contentstack_blog_postConnection;
  readonly allContentstackContentTypes: ContentstackContentTypesConnection;
  readonly allContentstackFooter: Contentstack_footerConnection;
  readonly allContentstackForm: Contentstack_formConnection;
  readonly allContentstackHeader: Contentstack_headerConnection;
  readonly allContentstackNewsAndInsights: Contentstack_news_and_insightsConnection;
  readonly allContentstackPage: Contentstack_pageConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly contentstackAssets: Maybe<Contentstack_assets>;
  readonly contentstackAuthor: Maybe<Contentstack_author>;
  readonly contentstackBlogPost: Maybe<Contentstack_blog_post>;
  readonly contentstackContentTypes: Maybe<ContentstackContentTypes>;
  readonly contentstackFooter: Maybe<Contentstack_footer>;
  readonly contentstackForm: Maybe<Contentstack_form>;
  readonly contentstackHeader: Maybe<Contentstack_header>;
  readonly contentstackNewsAndInsights: Maybe<Contentstack_news_and_insights>;
  readonly contentstackPage: Maybe<Contentstack_page>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allContentstackAssetsArgs = {
  filter: InputMaybe<Contentstack_assetsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_assetsSortInput>;
};


type Query_allContentstackAuthorArgs = {
  filter: InputMaybe<Contentstack_authorFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_authorSortInput>;
};


type Query_allContentstackBlogPostArgs = {
  filter: InputMaybe<Contentstack_blog_postFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_blog_postSortInput>;
};


type Query_allContentstackContentTypesArgs = {
  filter: InputMaybe<ContentstackContentTypesFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ContentstackContentTypesSortInput>;
};


type Query_allContentstackFooterArgs = {
  filter: InputMaybe<Contentstack_footerFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_footerSortInput>;
};


type Query_allContentstackFormArgs = {
  filter: InputMaybe<Contentstack_formFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_formSortInput>;
};


type Query_allContentstackHeaderArgs = {
  filter: InputMaybe<Contentstack_headerFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_headerSortInput>;
};


type Query_allContentstackNewsAndInsightsArgs = {
  filter: InputMaybe<Contentstack_news_and_insightsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_news_and_insightsSortInput>;
};


type Query_allContentstackPageArgs = {
  filter: InputMaybe<Contentstack_pageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<Contentstack_pageSortInput>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_contentstackAssetsArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  content_type: InputMaybe<StringQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  dimension: InputMaybe<Contentstack_assetsDimensionFilterInput>;
  file_size: InputMaybe<StringQueryOperatorInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  gatsbyImageData: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  is_dir: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  parent_uid: InputMaybe<StringQueryOperatorInput>;
  publish_details: InputMaybe<Contentstack_assetsPublish_detailsFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackAuthorArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  bio: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  picture: InputMaybe<Contentstack_assetsFilterInput>;
  publish_details: InputMaybe<Contentstack_author_publish_detailsFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackBlogPostArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  author: InputMaybe<Contentstack_authorFilterListInput>;
  body: InputMaybe<JSONQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  date: InputMaybe<DateQueryOperatorInput>;
  featured_image: InputMaybe<Contentstack_assetsFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  is_archived: InputMaybe<BooleanQueryOperatorInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publish_details: InputMaybe<Contentstack_blog_post_publish_detailsFilterInput>;
  related_post: InputMaybe<Contentstack_blog_postFilterListInput>;
  seo: InputMaybe<Contentstack_blog_post_seoFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackContentTypesArgs = {
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  schema: InputMaybe<JSONQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentstackFooterArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  copyright: InputMaybe<JSONQueryOperatorInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  logo: InputMaybe<Contentstack_assetsFilterInput>;
  navigation: InputMaybe<Contentstack_footer_navigationFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  policies: InputMaybe<Contentstack_footer_policiesFilterInput>;
  publish_details: InputMaybe<Contentstack_footer_publish_detailsFilterInput>;
  social: InputMaybe<Contentstack_footer_socialFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackFormArgs = {
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  fields: InputMaybe<Contentstack_form_fieldsFilterListInput>;
  form: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publish_details: InputMaybe<Contentstack_form_publish_detailsFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentstackHeaderArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  enquiry_button_label: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  language_select: InputMaybe<Contentstack_header_language_selectFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  logo: InputMaybe<Contentstack_assetsFilterInput>;
  navigation_menu: InputMaybe<Contentstack_header_navigation_menuFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publish_details: InputMaybe<Contentstack_header_publish_detailsFilterInput>;
  secondary_menu: InputMaybe<Contentstack_header_secondary_menuFilterListInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackNewsAndInsightsArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  body: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  featured_image: InputMaybe<Contentstack_assetsFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  publish_details: InputMaybe<Contentstack_news_and_insights_publish_detailsFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  type: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentstackPageArgs = {
  _version: InputMaybe<IntQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  created_at: InputMaybe<DateQueryOperatorInput>;
  created_by: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  locale: InputMaybe<StringQueryOperatorInput>;
  page_components: InputMaybe<Contentstack_page_page_componentsFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publish_details: InputMaybe<Contentstack_page_publish_detailsFilterInput>;
  seo: InputMaybe<Contentstack_page_seoFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<StringQueryOperatorInput>;
  updated_at: InputMaybe<DateQueryOperatorInput>;
  updated_by: InputMaybe<StringQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.author'
  | 'siteMetadata.description'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.contentFilePath'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.contentFilePath'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.contentFilePath'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.contentFilePath'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.contentFilePath'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.contentFilePath'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.contentFilePath'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.contentFilePath'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.contentFilePath'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.contentFilePath'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type linktype = {
  readonly href: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly uuid: Maybe<Scalars['Int']>;
};

type linktypeFilterInput = {
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly uuid: InputMaybe<IntQueryOperatorInput>;
};

type linktypeFilterListInput = {
  readonly elemMatch: InputMaybe<linktypeFilterInput>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type HeaderQueryQueryVariables = Exact<{ [key: string]: never; }>;


type HeaderQueryQuery = { readonly contentstackHeader: { readonly title: string, readonly uid: string | null, readonly logo: { readonly uid: string | null, readonly url: string | null, readonly filename: string | null }, readonly navigation_menu: ReadonlyArray<{ readonly label: string | null, readonly page_reference: ReadonlyArray<{ readonly title: string, readonly url: string | null, readonly uid: string | null } | null>, readonly icon: { readonly uid: string | null, readonly url: string | null, readonly filename: string | null } | null } | null> | null, readonly secondary_menu: ReadonlyArray<{ readonly label: string | null, readonly url: string | null, readonly icon: { readonly uid: string | null, readonly url: string | null, readonly filename: string | null } | null } | null> | null } | null };

type HomePageQueryVariables = Exact<{ [key: string]: never; }>;


type HomePageQuery = { readonly contentstackPage: { readonly title: string, readonly url: string | null, readonly uid: string | null, readonly locale: string | null, readonly seo: { readonly enable_search_indexing: boolean | null, readonly keywords: string | null, readonly meta_description: string | null, readonly meta_title: string | null } | null, readonly page_components: ReadonlyArray<{ readonly contact_details: { readonly address: string | null, readonly email: string | null, readonly phone: string | null } | null, readonly enquiry_block: { readonly title: string | null, readonly body: string | null } | null, readonly cards_slider: { readonly title: string | null, readonly cards: ReadonlyArray<{ readonly title: string, readonly type: string | null, readonly date: string | null, readonly url: string | null, readonly featured_image: { readonly url: string | null, readonly title: string | null } } | null> } | null, readonly from_blog: { readonly title_h2: string | null, readonly featured_blogs: ReadonlyArray<{ readonly title: string, readonly type: string | null, readonly uid: string | null, readonly url: string | null, readonly body: Record<string, unknown> | null, readonly featured_image: { readonly url: string | null, readonly uid: string | null }, readonly author: ReadonlyArray<{ readonly title: string, readonly uid: string | null, readonly bio: string | null } | null> } | null> | null, readonly view_articles: { readonly title: string | null, readonly href: string | null } | null } | null, readonly hero_banner: { readonly banner_description: string | null, readonly banner_title: string | null, readonly bg_color: string | null, readonly banner_image: { readonly url: string | null, readonly uid: string | null } | null, readonly call_to_action: { readonly title: string | null, readonly href: string | null } | null } | null, readonly our_team: { readonly title_h2: string | null, readonly description: string | null, readonly employees: ReadonlyArray<{ readonly name: string | null, readonly designation: string | null, readonly image: { readonly url: string | null, readonly uid: string | null } } | null> | null } | null, readonly section: { readonly title_h2: string | null, readonly description: string | null, readonly image_alignment: string | null, readonly image: { readonly url: string | null, readonly uid: string | null }, readonly call_to_action: { readonly title: string | null, readonly href: string | null } | null } | null, readonly section_with_buckets: { readonly title_h2: string | null, readonly description: string | null, readonly buckets: ReadonlyArray<{ readonly title_h3: string | null, readonly description: Record<string, unknown> | null, readonly icon: { readonly url: string | null, readonly uid: string | null }, readonly call_to_action: { readonly title: string | null, readonly href: string | null } | null } | null> | null } | null, readonly section_with_cards: { readonly cards: ReadonlyArray<{ readonly title_h3: string | null, readonly description: string | null, readonly call_to_action: { readonly title: string | null, readonly href: string | null } | null } | null> | null } | null, readonly products: { readonly products: Record<string, unknown> | null } | null } | null> | null } | null };

type Unnamed_1_QueryVariables = Exact<{ [key: string]: never; }>;


type Unnamed_1_Query = { readonly allContentstackBlogPost: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly url: string | null }> } };

type Unnamed_2_QueryVariables = Exact<{ [key: string]: never; }>;


type Unnamed_2_Query = { readonly allContentstackPage: { readonly nodes: ReadonlyArray<{ readonly title: string, readonly url: string | null }> } };


}
